testing {
  port = 0
}

nfe {
  application {
    servers {
      nfe-main {
        settings {
          bindPort = 8080
        }
      }
    }
    settings {
      configurationUpdateServer {
        enabled = false
      }
    }
  }

  content {
    routes {
      / {
        path = /local/path/to/content/root
      }
      /doc/fives {
        path = /local/path/to/content/root/doc/fives
      }
      /doc/fives_override {
        permissionNeeded = "content:read"
        path = /local/path/to/content/root/doc/fives
      }
    }
  }

  apiKeys = [
    {
      ou = teamyo
      service = "slapservice"
      key = "d72e7b1071ab44b8be420d2624a607f0"
    },
    {
      ou = teamyo
      service = "slapservice"
      key = "3f05cc235e5243caaefac178eab88ae2"
    }
  ]

  proxy {
    routes = [
      ${nfe.proxyRouteTemplate} {
        name = fives
        path = "/v1/teamyo/slapservice/api/v1/fives/"
        permissionNeeded = "apikey:encoded_path"
        clients = [
          ${xio.clientTemplate} {
            name = "fives client"
            remoteIp = "127.0.0.1"
            remotePort = ${testing.port}
          }
        ]
      },
      ${nfe.proxyRouteTemplate} {
        name = fives
        path = "/v1/teamyo/slapservice/api/v1/hello/"
        permissionNeeded = "none"
        clients = [
          ${xio.clientTemplate} {
            name = "fives hello client"
            remoteIp = "127.0.0.1"
            remotePort = ${testing.port}
          }
        ]
      }
    ]
  }

  gatekeeper {
    host = "127.0.0.1"
    port = "7777"
  }
}

nfeStateUnitTest {
  nfe {
    application = ${xio.applicationTemplate} {
      servers {
        nfe-main {
          settings {
            bindPort = 8080
          }
        }
      }
      settings {
        configurationUpdateServer {
          enabled = false
        }
      }
    }

    coreDatabase = {
      host = "127.0.0.1"
      port = 9999
      tls = ${xio.clientTemplate.settings.tls}
    }

    content {
      routes {
        / {
          path = /local/path/to/content/root
        }
        /doc/fives {
          path = /local/path/to/content/root/doc/fives
        }
        /doc/fives_override {
          permissionNeeded = "content:read"
          path = /local/path/to/content/root/doc/fives
        }
      }
    }

    apiKeys = []

    proxyRouteTemplate = ${xio.routeTemplate} {
      proxyHostPolicy = "UseRequestHeader"
      proxyHost = ""
      proxyPath = "/"
    }

    proxy {
      routes = [
        ${nfe.proxyRouteTemplate} {
          name = fives
          path = "/api/v1/fives/"
          permissionNeeded = "none"
          clients = [
            ${xio.clientTemplate} {
              name = "fives client"
              remoteIp = "127.0.0.1"
              remotePort = ${testing.port}
            }
          ]
        }
      ]
    }

    gatekeeper {
      host = "127.0.0.1"
      port = "7777"
    }
  }
}

nfeStateUnitTestUpdated {
  nfe {
    application = ${xio.applicationTemplate} {
      servers {
        nfe-main {
          settings {
            bindPort = 8080
          }
        }
      }
      settings {
        configurationUpdateServer {
          enabled = false
        }
      }
    }

    coreDatabase = {
      host = "127.0.0.1"
      port = 9999
      tls = ${xio.clientTemplate.settings.tls}
    }

    content {
      routes {
        / {
          path = /local/path/to/content/root
        }
        /doc/fives {
          path = /local/path/to/content/root/doc/fives
        }
        /doc/fives_override {
          permissionNeeded = "content:read"
          path = /local/path/to/content/root/doc/fives
        }
      }
    }

    apiKeys = []

    proxyRouteTemplate = ${xio.routeTemplate} {
      proxyHostPolicy = "UseRequestHeader"
      proxyHost = ""
      proxyPath = "/"
    }

    proxy {
      routes = [
        ${nfe.proxyRouteTemplate} {
          name = fives
          path = "/api/v1/twos/"
          permissionNeeded = "none"
          clients = [
            ${xio.clientTemplate} {
              name = "twos client"
              remoteIp = "127.0.0.1"
              remotePort = ${testing.port}
            }
          ]
        }
      ]
    }

    gatekeeper {
      host = "127.0.0.1"
      port = "7777"
    }
  }
}
